# -*- coding: utf-8 -*-
"""Simulação Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UkmNhdX-V15UjHa3MOW7oT02ruLdbT7t

# **RUNGE KUTTA - CÁLCULO NUMÉRICO PARA RESOLUÇÃO DE EDOs**
"""

import numpy as np
#execicio "a"
#A EDO
def f1(x,y)
  return (k21*x20 - k12*x10)        #funcao 1
def f2(x,y)
   return (k12*x10 - (k21+k20)*x20)  #funcao 2

x10 = 100             # essa e a variavel x1 no tempo 0
x20 = 10              # essa e a variavel x2 no tempo 0
k12 = 0.03
k21 = 0.02
k20 = 0.01
#h =                   #espaco entre os pontos
#n =                   #numero de pontos
FLAG = 1
while (FLAG = 1):
     K1= hf()

def f1(x,y):
  return (1 - y/x)

def runge1(f,x0,xf,y0,h):

    y1 = y0 + h*f(x0,y0)
    x1 = x0 + h

    n = int((xf-x0)/h)
    for i in range(1,n):
      x0 = x1
      y0 = y1
      y1 = y0 + h*f(x0,y0)
      x1 = x0 + h

    return x1,y1

def runge2(f,x0,xf,y0,h):

    y1 = y0 + h/2*(f(x0,y0)+f(x0+h,y0+h*f(x0,y0)))
    x1 = x0 + h

    n = int((xf-x0)/h)
    for i in range(1,n):
      x0 = x1
      y0 = y1
      y1 = y0 + h/2*(f(x0,y0)+f(x0+h,y0+h*f(x0,y0)))
      x1 = x0 + h

    return x1,y1

def runge3(f,x0,xf,y0,h):

    k1 = h*f(x0,y0)
    k2 = h*f(x0+h/2,y0+k1/2)
    k3 = h*f(x0+3*h/4,y0+3*k2/4)
    y1 = y0 + (2/9)*k1 + (1/3)*k2 + (4/9)*k3
    x1 = x0 + h

    n = int((xf-x0)/h)
    for i in range(1,n):
      x0 = x1
      y0 = y1
      k1 = h*f(x0,y0)
      k2 = h*f(x0+h/2,y0+k1/2)
      k3 = h*f(x0+3*h/4,y0+3*k2/4)
      y1 = y0 + (2/9)*k1 + (1/3)*k2 + (4/9)*k3
      x1 = x0 + h

    return x1,y1


f = f1
x0 = 2
y0 = 2
xf = 2.1
h = 0.1
x1,y1 = runge1(f,x0,xf,y0,h)
print("Runge 1: y[",x1,"] = ",y1)
x1,y1 = runge2(f,x0,xf,y0,h)
print("Runge 2: y[",x1,"] = ",y1)
x1,y1 = runge3(f,x0,xf,y0,h)
print("Runge 3: y[",x1,"] = ",y1)